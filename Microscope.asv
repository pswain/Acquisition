classdef Microscope
    properties
        Name
        nameImage%Icon to display in GUI
        Config%String, path of micromanager config file
        InitialChannel%To be set when starting up
    end
    
    methods
        function obj=Microscope()
        %Constructor function for microscope object
        %Sets default values for various properties
        %Get computer name
        [idum,hostname]= system('hostname');
        if length(hostname)<14
            hostname(length(hostname)+1:14)=' ';
        end
        %Establish which computer is running this, and therefore which microscope
        k=strfind(hostname,'SCE-BIO-C03727');
        if ~isempty(k)
            %Robin
            obj.Name='Robin';
            obj.nameImage=imread('Robin.jpg');
            obj.Config='C:\Users\Public\MM config files\LeicaConfig.cfg';
            obj.InitialChannel='BrightField';
        else
            l=strfind(hostname,'SCE-BIO-C02471');
            if ~isempty(l)
                %Batman
                obj.Name='Batman';      
                obj.nameImage=imread('Batman.jpg');
                obj.Config='C:\Micromanager config files\MMConfig_2_pHluorin.cfg';
                obj.InitialChannel='DIC';
            else
               obj.Name='Demo';
               obj.nameImage=imread('Joker.jpg');
               if ismac
                obj.Config='/Applications/Micro-Manager1.4/MMConfig_demo.cfg';
                obj.InitialChannel='DIC';
               else
                   %Insert path to demo config file here
               end
                
                
            end
            
        end

        end
        function loadConfig(obj)
           global mmc;
           mmc.loadSystemConfiguration(obj.Config);
        end
        
        function setInitialChannel(obj)
            global mmc;
            mmc.setConfig('Channel',obj.InitialChannel);
        end
        
        function Initialize(obj)
        %Sets initial property values
        global mmc
        switch obj.Name
            case('Batman')
                mmc.setShutterDevice('DTOL-Shutter');
                mmc.setProperty('Evolve', 'Gain', '2');
                mmc.setProperty('Evolve', 'ClearMode', 'Clear Pre-Sequence');
                mmc.setProperty('Evolve','MultiplierGain','270');%starting gain
                %next 2 lines are specific for QUANT version of scripts
                mmc.setProperty('Evolve','PP  4   ENABLED','Yes');%Enable quant view - output in photoelectrons
                mmc.setProperty('Evolve','PP  4   (e)','1');%one grey level per pixel
                mmc.setProperty('DTOL-Shutter','OnOff', '0');
                mmc.setProperty('DTOL-DAC-1','Volts', '4');
                mmc.setProperty('TILightPath','Label','2-Left100');%all light should go to the camera
                mmc.setAutoShutter(1);
            case 'Robin'
                mmc.setProperty('Myo','ReadoutRate','10MHz 14bit');
        end
            
        
        end
        function setGUI(obj, handles)
               %Modifies the multiDGUI for use with this microscope
               %Show the microscope name icon (Batman or Robin)
               axes(handles.micNameIcon)
               imshow(handles.acquisition.microscope.nameImage);
               %Get channel names
               global mmc;
               chList=mmc.getAvailableConfigs('Channel');
               %Loop through the channels - applying each to a set of
               %controls
               
               
               for ch=0:min(chList.size-1,7)
                  chName=chList.get(ch);
                  chName=char(chName);
                  if ~strcmp(chName,'Kill') && ~strcmp(chName,'Picogreen')
                      useTagName=['useCh' num2str(ch)];
                      set(handles.(useTagName),'String',chName);
                      %Activate controls for this channel
                      expTagName=['expCh' num2str(ch)];
                      skipTagName=['skipCh' num2str(ch)];
                      camModeTagName=['cammodeCh' num2str(ch)];
                      startGainTagName=['startgainCh' num2str(ch)];
                      voltTagName=['voltCh' num2str(ch)];
                      zTagName=['ZsectCh' num2str(ch)];
                      startTpTagName=['starttpCh' num2str(ch)];
                      snapTagName=['snapCh' num2str(ch)]; 
                      set(handles.(useTagName),'Enable','On');            
                      set(handles.(expTagName),'Enable','On');            
                      set(handles.(skipTagName),'Enable','On');
                      set(handles.(zTagName),'Enable','On');
                      set(handles.(startTpTagName),'Enable','On');
                      set(handles.(snapTagName),'Enable','On');
                      set(handles.(startGainTagName),'Enable','Off');
                      set(handles.(camModeTagName),'Value',2);
                      switch(obj.Name)
                          case 'Batman'
                              set(handles.(camModeTagName),'Enable','On');
                          case 'Robin'
                              set(handles.(camModeTagName),'Enable','Off');
                      end
                      %Set button colours based on the channel names
                      chColour=getChColour(chName);
                      set(handles.(useTagName),'BackgroundColor',chColour);
                      set(handles.(snapTagName),'BackgroundColor',chColour);
                  end
                  ch=ch+1;
               end
               %Deactivate the controls for unused channels
               for ch=length(chList)+1:7
                  useTagName=['useCh' num2str(ch+1)];
                  %Deactivate controls for this channel
                  expTagName=['expCh' num2str(ch+1)];
                  skipTagName=['skipCh' num2str(ch+1)];
                  camModeTagName=['cammodeCh' num2str(ch+1)];
                  startGainTagName=['startgainCh' num2str(ch+1)];
                  voltTagName=['voltCh' num2str(ch+1)];
                  zTagName=['ZsectCh' num2str(ch+1)];
                  startTpTagName=['starttpCh' num2str(ch+1)];
                  snapTagName=['snapCh' num2str(ch+1)];
                  set(handles.(useTagName),'Enable','Off');            
                  set(handles.(expTagName),'Enable','Off');            
                  set(handles.(skipTagName),'Enable','Off');
                  set(handles.(zTagName),'Enable','Off');
                  set(handles.(startTpTagName),'Enable','Off');
                  set(handles.(snapTagName),'Enable','Off');
                  set(handles.(startGainTagName),'Enable','Off');
                  set(handles.(camModeTagName),'Enable','Off');             
               end
               
               
               
               switch obj.Name
                   case ('Batman')
                       set(handles.eye,'Enable','on');
                       set(handles.camera,'Enable','on');
                       set(handles.EM,'Enable','on');
                       set(handles.CCD,'Enable','on');
                       handles.acquisition.omero.tags{length(handles.acquisition.omero.tags)+1}='Batman';
                   case ('Robin')
                       handles.acquisition.omero.tags{length(handles.acquisition.omero.tags)+1}='Robin';
               end
               set(handles.TagList,'String', handles.acquisition.omero.tags);
                
        end
        function lightToCamera(obj)
           switch obj.Name 
               case('Batman')
                   global mmc
                   mmc.setProperty('TILightPath', 'Label','2-Left100');%send light to the camera
           end
            
        end
        function setLEDVoltage(obj, voltage)
           switch obj.Name 
               case('Batman')
                   global mmc
                   LED=mmc.getProperty('DTOL-Switch','State');
                   switch(str2num(LED))
                        case 1
                            dac=[];
                        case 2%The CFP LED - adjust DAC-1
                            dac='DTOL-DAC-1';
                        case 4%The GFP/YFP LED - adjust DAC-1
                            dac='DTOL-DAC-2';
                        case 8%The mCherry/cy5/tdTomato LED - adjust DAC-1
                            dac='DTOL-DAC-3';
                    end
                    if ~isempty(dac)
                    mmc.setProperty(dac,'Volts', voltage);
                    end
           end
        end
            
        function setCamMode(obj, mode,figTitle)
        global mmc
        switch (obj.Name)
            case('Batman')
                switch mode
                    case 1
                        mmc.setProperty ('Evolve','Port','Multiplication Gain');
                        gain=cell2mat(channel(7));
                        epg=cell2mat(channel(8));
                        mmc.setProperty ('Evolve','MultiplierGain',num2str(gain));
                        figTitle=strcat(figTitle,'. EMCCD, gain:',num2str(gain),'. EPG:',num2str(epg));
                    case 3
                        mmc.setProperty ('Evolve','Port','Multiplication Gain');
                        gain=cell2mat(channel(7));
                        epg=cell2mat(channel(8));
                        mmc.setProperty ('Evolve','MultiplierGain',num2str(gain));
                        figTitle=strcat(figTitle,'. EMCCD, gain:',num2str(gain),'. EPG:',num2str(epg));
                    case 2
                        mmc.setProperty ('Evolve','Port','Normal');
                        figTitle=strcat(figTitle,'. CCD');
                end
                mmc.waitForDevice('Evolve');
            end
        end
    end
end
